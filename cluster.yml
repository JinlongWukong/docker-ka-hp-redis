---
- name: Redis deloyment
  hosts: all
  gather_facts: yes
  vars_files:
    - vars/default.yml
  become: yes
  pre_tasks:
    - name: Install docker-ce
      import_role:
        name: docker
      when: not skip_docker_install|default(false)|bool
      tags: docker

    - name: Copy redis docker images
      copy:
        src: ../redis-images.tar
        dest: /tmp
      tags: image

    - name: Load docker images
      command: docker load -i /tmp/redis-images.tar
      tags: image

    - name: Set selinux policy
      selinux:
        policy: targeted
        state: "{{ selinux_state }}"
      tags: selinux

    - name: Check firewalld existence
      shell: which firewall-cmd
      register: firewalld
      failed_when: false
      changed_when: false
      tags: firewalld

    - name: Disable firewalld
      service:
        name: firewalld
        state: stopped
        enabled: no
      when: firewalld.rc == 0
      tags: firewalld

  tasks:
    ####### keepalive part #############
    # If keepalived interface is not define
    # select interface based on vip(same subnet)
    - set_fact:
        interface: |-
          {% for item in ansible_interfaces -%}
               {% if ansible_facts[item].ipv4 is defined -%}
                  {% if (ansible_facts[item].ipv4.address + '/' + ansible_facts[item].ipv4.netmask) | ipaddr('network/prefix') | network_in_network(vip) -%}
                     {{ item -}}
                  {% endif -%}
               {% endif -%}
          {% endfor -%}
      tags: keepalived
      when: interface is not defined

    - name: Stop if interface format is wrong
      assert:
        that:
          - interface is match("^e|b[a-z0-9]+[0-9]$")
          - interface in ansible_interfaces
      tags: keepalived

    - name: Create directory -> /etc/keepalived
      file:
        path: /etc/keepalived
        state: directory
      tags: keepalived

    - name: Generate keepalived configuration
      template:
        src: keepalived.conf.j2
        dest: /etc/keepalived/keepalived.conf
      register: ka_conf
      tags: keepalived

    - name: Run keepalived container
      shell: if docker ps -a | grep keepalived_redis ;then echo 'container existed'; \
        else docker run --cap-add=NET_ADMIN --cap-add=NET_BROADCAST --cap-add=NET_RAW --net=host --volume /etc/keepalived/keepalived.conf:/usr/local/etc/keepalived/keepalived.conf \
        --name=keepalived_redis --restart always -d {{ Keepalived_docker_image }} --copy-service; fi
      register: run_ka_result
      changed_when: "'container existed' not in run_ka_result.stdout"
      tags: keepalived

    - name: Restart keepalived container when conf changed
      shell: docker restart keepalived_redis
      when: ka_conf.changed and not run_ka_result.changed
      tags: keepalived

    ####### haproxy part #############
    - name: Create directory -> /etc/haproxy
      file:
        path: /etc/haproxy
        state: directory
      tags: haproxy

    - name: Generate haproxy configuration
      template:
        src: haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      register: hp_conf
      tags: haproxy

    - name: Run haproxy container
      shell: if docker ps -a | grep haproxy_redis ;then echo 'container existed'; \
        else docker run --restart always -d --name=haproxy_redis --net=host -v /etc/haproxy:/usr/local/etc/haproxy/:ro {{ haproxy_docker_image }}; fi
      register: run_hp_result
      changed_when: "'container existed' not in run_hp_result.stdout"
      tags: haproxy

    - name: Restart haproxy container when conf changed
      shell: docker restart haproxy_redis
      when: hp_conf.changed and not run_hp_result.changed
      tags: haproxy

    ####### redis part #############
    - name: Create directory -> /etc/redis
      file:
        path: /etc/redis
        state: directory
      tags: redis

    - name: Generate redis server configuration
      template:
        src: redis.conf.j2
        dest: /etc/redis/redis.conf
      register: redis_conf
      tags: redis

    # Sentinel container will rewrite its configuration, so add tmp file to tell whether changes happened
    - name: Generate redis sentinel tmp configuration
      template:
        src: sentinel.conf.j2
        dest: /etc/redis/sentinel.conf.tmp
      register: sentinel_conf
      tags: redis

    - name: Generate redis sentinel configuration
      copy:
        src: /etc/redis/sentinel.conf.tmp
        dest: /etc/redis/sentinel.conf
        remote_src: true
      when: sentinel_conf.changed
      tags: redis

    - name: Run redis server container
      shell: if docker ps -a | grep redis_server ;then echo 'container existed'; \
        else docker run -tid --restart always --name redis_server --network host -p 6379:6379 -v /etc/redis:/usr/local/etc/redis {{ redis_docker_image }} redis-server /usr/local/etc/redis/redis.conf; fi
      register: run_redis_server_result
      changed_when: "'container existed' not in run_redis_server_result.stdout"
      tags: redis

    - name: Restart redis server container when conf changed
      shell: docker restart redis_server
      when: redis_conf.changed and not run_redis_server_result.changed
      tags: redis

    - name: Run redis sentinel container
      shell: if docker ps -a | grep redis_sentinel ;then echo 'container existed'; \
        else docker run -tid --restart always --name redis_sentinel --network host -p 26379:26379 -v /etc/redis:/usr/local/etc/redis {{ redis_docker_image }} sh -c "redis-sentinel /usr/local/etc/redis/sentinel.conf --sentinel & tail -f /dev/null"; fi
      register: run_redis_sentinel_result
      changed_when: "'container existed' not in run_redis_sentinel_result.stdout"
      tags: redis

    - name: Restart redis sentinel container when conf changed
      shell: docker restart redis_sentinel
      when: sentinel_conf.changed and not run_redis_sentinel_result.changed
      tags: redis

  post_tasks:
    - name: Will start post health check after wait 5 seconds
      pause: seconds=5
      tags: hc

    - name: Clear gathered facts from all currently targeted hosts
      meta: clear_facts
      tags: hc

    - name: Gather network info
      setup:
        gather_subset:
          - 'all'
      tags: hc

    - name: Print keepalive vip owner
      debug:
        msg: "vip: {{ vip }} configured on {{ inventory_hostname }}"
      when: vip in ansible_all_ipv4_addresses
      tags: hc

    - name: Fetch redis status using vip from local using curl telnet
      shell: echo -e 'AUTH {{ redis_pass }}\n PING\n info replication\n QUIT\n' | curl telnet://{{ vip }}:6380
      connection: local
      become: no
      run_once: true
      register: hc_result
      tags: hc

    - name: Print redis info replication
      debug: var=hc_result.stdout_lines
      connection: local
      run_once: true
      tags: hc

    - name: Check redis status result
      assert:
        that:
          - "'PONG' in hc_result.stdout"
          - "'role:master' in hc_result.stdout"
          - "'connected_slaves:{{ groups['replicator']|length }}' in hc_result.stdout"
        fail_msg: "redis post check failed !!!"
        success_msg: "Congratulations! install redis done and post health check PASS"
      run_once: true
      tags: hc

#    - debug: var=hc_result
#      tags: always